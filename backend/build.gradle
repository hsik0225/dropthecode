plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

group 'com.wootech'
version '0.0.1-SNAPSHOT'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

configurations {
    jsondoclet
}

ext {
    snippetsDir = file('build/generated-snippets')
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // QueryDSL
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:2.2.3"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:1.3.5"

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'it.ozimov:embedded-redis:0.7.2'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    // webClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // Oauth configuration
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'mysql:mysql-connector-java'
    testImplementation 'com.h2database:h2:1.4.199'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'


    // Spring Auto REST Docs
    testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.12-SNAPSHOT'
    jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet-jdk9:2.0.12-SNAPSHOT'

    // flyway
    implementation 'org.flywaydb:flyway-core'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'javax.cache:cache-api'
    implementation 'org.ehcache:ehcache'
    implementation 'org.hibernate:hibernate-jcache:5.4.32.Final'
}

test {
    testLogging {
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }

    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    useJUnitPlatform()

    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir

    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

task jsonDoclet(type: Javadoc, dependsOn: compileTestJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

task copyDocument(type: Copy) {
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task restDocs {
    dependsOn(jsonDoclet, test, asciidoctor, copyDocument)
    test.mustRunAfter(jsonDoclet)
    asciidoctor.mustRunAfter(test)
    copyDocument.mustRunAfter(asciidoctor)
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(test, jacocoTestReport, jacocoTestCoverageVerification)
    jacocoTestReport.mustRunAfter(test)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

check {
    dependsOn(testCoverage, restDocs)
    restDocs.mustRunAfter(testCoverage)
}

jar {
    enabled = false
}

// querydsl 적용
def generated = 'src/main/generated'
sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
    options.encoding = "UTF-8"
}

clean.doLast {
    file(generated).deleteDir()
}

sonarqube {
    properties {
        property "sonar.projectKey", "dropthecode"

        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/util/**, **/support/**, **/dto/**"

        property "sonar.tests", "src/test/java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def QEntities = []

    for (qPattern in '**/QA'..'**/QZ') {
        QEntities.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                            excludes: [
                                    'com/wootech/dropthecode/util/**',
                                    'com/wootech/dropthecode/dto/**',
                                    'com/wootech/dropthecode/*Applicaiton'
                            ] + QEntities
                    )
                })
        )
    }
}

jacocoTestCoverageVerification {
    def QEntities = []

    for (qPattern in '*.QA'..'*.QZ') {
        QEntities.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            excludes = [
                    'com.wootech.dropthecode.util.*',
                    'com.wootech.dropthecode.dto.*',
                    'com.wootech.dropthecode.*Application',
            ] + QEntities
        }
    }
}
